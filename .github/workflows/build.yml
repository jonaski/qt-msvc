name: Build
on: [push, pull_request]

env:

  nasm_version: '2.16.03'

  yasm_version: '1.3.0'

  win_flex_bison_version: '2.5.25'

  pkgconf_version: '2.3.0'

  mimalloc_version: '2.1.2'

  zlib_version: '1.3.1'

  openssl_version: '3.3.2'

  libpng_version: '1.6.44'

  libjpeg_turbo_version: '3.0.1'

  pcre2_version: '10.44'

  bzip2_version: '1.0.8'

  xz_version: '5.6.3'

  brotli_version: '1.1.0'

  icu4c_version: '75.1'

  expat_version: '2.6.3'

  boost_version: '1.86.0'

  file_version: '5.44'

  sqlite3_version: '3460100'

  glib_version: '2.82.2'

  freetype_version: '2.13.3'

  harfbuzz_version: '10.0.1'

  mariadbclient_version: '3.4.1'

  qt_version: '6.7.2'

  quazip_version: '1.4'


  max_releases: '6'

  curl_options: '-f -O -L --connect-timeout 15 -m 900 --retry 15 --retry-delay 10 --retry-max-time 300 --retry-all-errors'

  sourceforge_mirror: 'downloads.sourceforge.net'

  qt_mirror: 'mirrors.ukfast.co.uk/sites/qt.io'

  cmake_loglevel: 'DEBUG'


jobs:

  build-windows-msvc:
    name: Build Windows MSVC
    runs-on: windows-2022

    if: (!contains(github.event.head_commit.message, 'skip ci'))

    strategy:
      matrix:
       arch: [ x86_64, x86 ]
       buildtype: [ release, debug ]

    steps:

      - name: Set buildtype
        shell: bash
        run: echo "buildtype=$(echo ${{matrix.buildtype}} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set cmake and meson buildtype
        shell: bash
        run: |
          echo "cmake_buildtype=$(echo ${{env.buildtype}} | sed 's/.*/\u&/')" >> $GITHUB_ENV
          echo "meson_buildtype=${{env.buildtype}}" >> $GITHUB_ENV

      - name: Set prefix path
        shell: bash
        run: |
          echo "prefix_path_backslash=c:\qt_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_backslash2=c:\\\\qt_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_forwardslash=c:/qt_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_unix=/c/qt_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV

      - name: Cleanup PATH
        uses: egor-tensin/cleanup-path@v4
        with:
          dirs: ${{env.prefix_path_backslash}}\bin;C:\Windows;C:\Windows\system32;C:\Program Files\Git\bin;C:\Program Files\CMake\bin;C:\Program Files\GitHub CLI;C:\ProgramData\Chocolatey\bin;C:\Strawberry\perl\bin;C:\hostedtoolcache\windows\Python\3.9.13\x64;C:\hostedtoolcache\windows\Python\3.9.13\x64\Scripts

      - name: Set lib postfix
        if: env.buildtype == 'debug'
        shell: bash
        run: echo "lib_postfix=d" >> $GITHUB_ENV

      - name: Set arch variables (x86)
        if: matrix.arch == 'x86'
        shell: bash
        run: |
          echo "openssl_platform=VC-WIN32" >> $GITHUB_ENV
          echo "msbuild_platform=win32" >> $GITHUB_ENV
          echo "arch_short=x86" >> $GITHUB_ENV
          echo "arch_win=win32" >> $GITHUB_ENV
          echo "libdir=lib" >> $GITHUB_ENV
          echo "bindir=bin" >> $GITHUB_ENV

      - name: Set arch variables (x86_64)
        if: matrix.arch == 'x86_64'
        shell: bash
        run: |
          echo "openssl_platform=VC-WIN64A" >> $GITHUB_ENV
          echo "msbuild_platform=x64" >> $GITHUB_ENV
          echo "arch_short=x64" >> $GITHUB_ENV
          echo "arch_win=win64" >> $GITHUB_ENV
          echo "libdir=lib64" >> $GITHUB_ENV
          echo "bindir=bin64" >> $GITHUB_ENV

      - name: Set extra version variables
        shell: bash
        run: |
          echo "boost_version_underscore=$(echo ${{env.boost_version}} | sed 's/\./_/g')" >> $GITHUB_ENV
          echo "icu4c_version_underscore=$(echo ${{env.icu4c_version}} | sed 's/\./_/g')" >> $GITHUB_ENV
          echo "icu4c_version_dash=$(echo ${{env.icu4c_version}} | sed 's/\./\-/g')" >> $GITHUB_ENV
          echo "glib_version_short=$(echo ${{env.glib_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "libsoup_version_short=$(echo ${{env.libsoup_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "qt_version_short=$(echo ${{env.qt_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "file_version_underscore=$(echo ${{env.file_version}} | sed 's/\./_/g')" >> $GITHUB_ENV
          echo "expat_version_underscore=$(echo ${{env.expat_version}} | sed 's/\./_/g')" >> $GITHUB_ENV

      - name: Create directories
        shell: bash
        run: mkdir -p ${{env.prefix_path_unix}}/{bin,lib,include}

      - name: Update PATH
        shell: pwsh
        run: echo "${{env.prefix_path_backslash}}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Copy bin files
        shell: bash
        run: cp /c/strawberry/c/bin/{patch.exe,strip.exe,strings.exe,objdump.exe} ${{env.prefix_path_unix}}/bin

      - name: Delete conflicting libraries
        shell: bash
        run: rm -rf /c/{msys64,mingw32,mingw64} /c/strawberry/c "/c/program files/OpenSSL" /c/mysql "C:/program files/MySQL" "/c/program files/postgresql"

      - name: Delete conflicting icu
        shell: bash
        run: find "/c/program files (x86)/windows kits/" -type f \( -iname 'icu*.lib' -o -iname 'icu*.h' \) -print -delete


      - name: Setup Python
        uses: actions/setup-python@v5

      - name: Install python dependencies
        shell: cmd
        run: pip install meson ninja


      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.arch}}
          sdk: 10.0.20348.0
          vsversion: 2022


      - name: Checkout
        uses: actions/checkout@v4


      - name: Create downloads directory
        shell: cmd
        run: mkdir downloads

      - name: Create build directory
        shell: cmd
        run: mkdir build


      - name: Download nasm
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://www.nasm.us/pub/nasm/releasebuilds/${{env.nasm_version}}/${{env.arch_win}}/nasm-${{env.nasm_version}}-installer-${{env.arch_short}}.exe

      - name: Create nasm directory
        shell: cmd
        run: mkdir c:\nasm

      - name: Extract nasm
        shell: cmd
        working-directory: c:/nasm
        run: 7z x "${{github.workspace}}\downloads\nasm-${{env.nasm_version}}-installer-${{env.arch_short}}.exe"

      - name: Copy nasm
        shell: bash
        run: cp /c/nasm/nasm.exe /c/nasm/nasmw.exe

      - name: Add nasm to PATH
        shell: pwsh
        run: echo "c:\nasm" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Download win_flex_bison
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/lexxmark/winflexbison/releases/download/v${{env.win_flex_bison_version}}/win_flex_bison-${{env.win_flex_bison_version}}.zip

      - name: Create win_flex_bison directory
        shell: cmd
        run: mkdir c:\win_flex_bison

      - name: Extract win_flex_bison
        shell: cmd
        working-directory: c:\win_flex_bison
        run: 7z x "${{github.workspace}}\downloads\win_flex_bison-${{env.win_flex_bison_version}}.zip"

      - name: Add win_flex_bison to PATH
        shell: pwsh
        run: echo "c:\win_flex_bison" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Download pkgconf
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/pkgconf/pkgconf/archive/refs/tags/pkgconf-${{env.pkgconf_version}}.tar.gz

      - name: Extract pkgconf
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/pkgconf-${{env.pkgconf_version}}.tar.gz

      - name: Configure pkgconf
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/pkgconf-pkgconf-${{env.pkgconf_version}}
        run: meson setup --buildtype=${{env.meson_buildtype}} --default-library=shared --prefix=${{env.prefix_path_backslash}} --wrap-mode=nodownload -Dtests=disabled build

      - name: Build pkgconf
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/pkgconf-pkgconf-${{env.pkgconf_version}}/build
        run: ninja

      - name: Install pkgconf
        shell: cmd
        working-directory: build/pkgconf-pkgconf-${{env.pkgconf_version}}/build
        run: ninja install

      - name: Copy pkgconf
        shell: cmd
        run: copy ${{env.prefix_path_backslash}}\bin\pkgconf.exe ${{env.prefix_path_backslash}}\bin\pkg-config.exe


      - name: Download mimalloc
        shell: bash
        working-directory: downloads
        run: curl -o mimalloc-${{env.mimalloc_version}}.tar.gz ${{env.curl_options}} https://github.com/microsoft/mimalloc/archive/refs/tags/v${{env.mimalloc_version}}.tar.gz

      - name: Extract mimalloc
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/mimalloc-${{env.mimalloc_version}}.tar.gz

      - name: Configure mimalloc
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/mimalloc-${{env.mimalloc_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build mimalloc
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/mimalloc-${{env.mimalloc_version}}/build
        run: cmake --build .

      - name: Install mimalloc
        shell: cmd
        working-directory: build/mimalloc-${{env.mimalloc_version}}/build
        run: cmake --install .


      - name: Download yasm
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} http://www.tortall.net/projects/yasm/releases/yasm-${{env.yasm_version}}.tar.gz

      - name: Extract yasm
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/yasm-${{env.yasm_version}}.tar.gz

      - name: Configure yasm
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/yasm-${{env.yasm_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build yasm
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/yasm-${{env.yasm_version}}/build
        run: cmake --build .

      - name: Install yasm
        shell: cmd
        working-directory: build/yasm-${{env.yasm_version}}/build
        run: cmake --install .


      - name: Download zlib
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/madler/zlib/releases/download/v${{env.zlib_version}}/zlib-${{env.zlib_version}}.tar.gz

      - name: Extract zlib
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/zlib-${{env.zlib_version}}.tar.gz

      - name: Configure zlib
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/zlib-${{env.zlib_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build zlib
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/zlib-${{env.zlib_version}}/build
        run: cmake --build .

      - name: Install zlib
        shell: cmd
        working-directory: build/zlib-${{env.zlib_version}}/build
        run: cmake --install .

      - name: Copy zlib (release)
        if: env.buildtype == 'release'
        shell: bash
        run: cp ${{env.prefix_path_unix}}/lib/zlib.lib ${{env.prefix_path_unix}}/lib/z.lib

      - name: Copy zlib (debug)
        if: env.buildtype == 'debug'
        shell: bash
        run: |
          cp ${{env.prefix_path_unix}}/lib/zlibd.lib ${{env.prefix_path_unix}}/lib/z.lib
          cp ${{env.prefix_path_unix}}/lib/zlibd.lib ${{env.prefix_path_unix}}/lib/zd.lib


      - name: Download openssl
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/openssl/openssl/releases/download/openssl-${{env.openssl_version}}/openssl-${{env.openssl_version}}.tar.gz

      - name: Extract openssl
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/openssl-${{env.openssl_version}}.tar.gz

      - name: Configure openssl (release)
        if: env.buildtype == 'release'
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/openssl-${{env.openssl_version}}
        run: perl Configure ${{env.openssl_platform}} shared zlib no-capieng no-tests --prefix=${{env.prefix_path_backslash}} --libdir=lib --openssldir=${{env.prefix_path_backslash}}\ssl --release --with-zlib-include=${{env.prefix_path_backslash}}\include --with-zlib-lib=${{env.prefix_path_backslash}}\lib\zlib.lib

      - name: Configure openssl (debug)
        if: env.buildtype == 'debug'
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/openssl-${{env.openssl_version}}
        run: perl Configure ${{env.openssl_platform}} shared zlib no-capieng no-tests --prefix=${{env.prefix_path_backslash}} --libdir=lib --openssldir=${{env.prefix_path_backslash}}\ssl --debug --with-zlib-include=${{env.prefix_path_backslash}}\include --with-zlib-lib=${{env.prefix_path_backslash}}\lib\zlibd.lib

      - name: Build openssl
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/openssl-${{env.openssl_version}}
        run: nmake

      - name: Install openssl
        shell: cmd
        working-directory: build/openssl-${{env.openssl_version}}
        run: nmake install_sw


      - name: Copy openssl libs
        shell: cmd
        run: |
          copy ${{env.prefix_path_backslash}}\lib\libssl.lib ${{env.prefix_path_backslash}}\lib\ssl.lib
          copy ${{env.prefix_path_backslash}}\lib\libcrypto.lib ${{env.prefix_path_backslash}}\lib\crypto.lib

      - name: Generate openssl pc
        shell: bash
        run: |
          echo "prefix=${{env.prefix_path_forwardslash}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "exec_prefix=\${prefix}" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "libdir=\${exec_prefix}/lib" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "includedir=\${prefix}/include" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "Name: OpenSSL" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "Description: Secure Sockets Layer and cryptography libraries and tools" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "Version: ${{env.openssl_version}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo "Requires: libssl libcrypto" >>${{env.prefix_path_unix}}/lib/pkgconfig/openssl.pc
          echo
          echo "prefix=${{env.prefix_path_forwardslash}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "exec_prefix=\${prefix}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "libdir=\${exec_prefix}/lib" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "includedir=\${prefix}/include" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "enginesdir=\${libdir}/engines-3" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "modulesdir=\${libdir}/ossl-modules" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "Name: OpenSSL-libcrypto" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "Description: OpenSSL cryptography library" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "Version: ${{env.openssl_version}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "Libs: -L\${libdir} -lcrypto" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "Libs.private: -lz -ldl -pthread " >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo "Cflags: -DOPENSSL_LOAD_CONF -I\${includedir}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libcrypto.pc
          echo
          echo "prefix=${{env.prefix_path_forwardslash}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "exec_prefix=\${prefix}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "libdir=\${exec_prefix}/lib" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "includedir=\${prefix}/include" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "Name: OpenSSL-libssl" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "Description: Secure Sockets Layer and cryptography libraries and tools" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "Version: ${{env.openssl_version}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "Requires.private: libcrypto" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "Libs: -L\${libdir} -lssl" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc
          echo "Cflags: -DOPENSSL_LOAD_CONF -I\${includedir}" >>${{env.prefix_path_unix}}/lib/pkgconfig/libssl.pc


      - name: Download libpng
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.sourceforge_mirror}}/project/libpng/libpng16/${{env.libpng_version}}/libpng-${{env.libpng_version}}.tar.xz

      - name: Extract libpng
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/libpng-${{env.libpng_version}}.tar.xz

      - name: Patch libpng
        shell: bash
        working-directory: build/libpng-${{env.libpng_version}}
        run: patch -p1 < ../../patches/libpng-pkgconf.patch

      - name: Configure libpng
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/libpng-${{env.libpng_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build libpng
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/libpng-${{env.libpng_version}}/build
        run: cmake --build .

      - name: Install libpng
        shell: cmd
        working-directory: build/libpng-${{env.libpng_version}}/build
        run: cmake --install .


      - name: Download libjpeg-turbo
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.sourceforge_mirror}}/project/libjpeg-turbo/${{env.libjpeg_turbo_version}}/libjpeg-turbo-${{env.libjpeg_turbo_version}}.tar.gz

      - name: Extract libjpeg-turbo
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/libjpeg-turbo-${{env.libjpeg_turbo_version}}.tar.gz

      - name: Configure libjpeg-turbo
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/libjpeg-turbo-${{env.libjpeg_turbo_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G Ninja -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DENABLE_SHARED=ON

      - name: Build libjpeg-turbo
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/libjpeg-turbo-${{env.libjpeg_turbo_version}}/build
        run: cmake --build .

      - name: Install libjpeg-turbo
        shell: cmd
        working-directory: build/libjpeg-turbo-${{env.libjpeg_turbo_version}}/build
        run: cmake --install .


      - name: Download pcre2
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/PhilipHazel/pcre2/releases/download/pcre2-${{env.pcre2_version}}/pcre2-${{env.pcre2_version}}.tar.bz2

      - name: Extract pcre2
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/pcre2-${{env.pcre2_version}}.tar.bz2

      - name: Configure pcre2
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/pcre2-${{env.pcre2_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_BUILD_PCRE2_8=ON -DPCRE2_BUILD_PCRE2_16=ON -DPCRE2_BUILD_PCRE2_32=ON -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_BUILD_TESTS=OFF

      - name: Build pcre2
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/pcre2-${{env.pcre2_version}}/build
        run: cmake --build .

      - name: Install pcre2
        shell: cmd
        working-directory: build/pcre2-${{env.pcre2_version}}/build
        run: cmake --install .


      - name: Download bzip2
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://sourceware.org/pub/bzip2/bzip2-${{env.bzip2_version}}.tar.gz

      - name: Extract bzip2
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/bzip2-${{env.bzip2_version}}.tar.gz

      - name: Patch bzip2
        shell: bash
        working-directory: build/bzip2-${{env.bzip2_version}}
        run: patch -p1 < ../../patches/bzip2-cmake.patch

      - name: Configure bzip2
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/bzip2-${{env.bzip2_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build bzip2
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/bzip2-${{env.bzip2_version}}/build
        run: cmake --build .

      - name: Install bzip2
        shell: cmd
        working-directory: build/bzip2-${{env.bzip2_version}}/build
        run: cmake --install .


      - name: Download xz
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/tukaani-project/xz/releases/download/v${{env.xz_version}}/xz-${{env.xz_version}}.tar.xz

      - name: Extract xz
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/xz-${{env.xz_version}}.tar.xz

      - name: Configure xz
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/xz-${{env.xz_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DBUILD_TESTING=OFF

      - name: Build xz
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/xz-${{env.xz_version}}/build
        run: cmake --build .

      - name: Install xz
        shell: cmd
        working-directory: build/xz-${{env.xz_version}}/build
        run: cmake --install .


      - name: Download brotli
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/google/brotli/archive/refs/tags/v${{env.brotli_version}}.tar.gz

      - name: Extract brotli
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/v${{env.brotli_version}}.tar.gz

      - name: Configure brotli
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/brotli-${{env.brotli_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build_dir -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_TESTING=OFF

      - name: Build brotli
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/brotli-${{env.brotli_version}}/build_dir
        run: cmake --build .

      - name: Install brotli
        shell: cmd
        working-directory: build/brotli-${{env.brotli_version}}/build_dir
        run: cmake --install .


      - name: Download libiconv
        shell: cmd
        working-directory: build
        run: git clone https://github.com/pffang/libiconv-for-Windows

      - name: Build libiconv
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/libiconv-for-Windows
        run: msbuild libiconv.sln /property:Configuration=${{env.buildtype}}

      - name: Install libiconv
        shell: cmd
        working-directory: build/libiconv-for-Windows
        run: |
          copy include\*.h ${{env.prefix_path_backslash}}\include\
          copy output\${{env.msbuild_platform}}\${{env.buildtype}}\*.lib ${{env.prefix_path_backslash}}\lib\
          copy output\${{env.msbuild_platform}}\${{env.buildtype}}\*.dll ${{env.prefix_path_backslash}}\bin\

      - name: Copy libiconv (debug)
        if: env.buildtype == 'debug'
        shell: bash
        run: cp ${{env.prefix_path_unix}}/lib/libiconvD.lib ${{env.prefix_path_unix}}/lib/libiconv.lib


      - name: Download icu
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/unicode-org/icu/releases/download/release-${{env.icu4c_version_dash}}/icu4c-${{env.icu4c_version_underscore}}-src.zip

      - name: Extract icu
        shell: bash
        working-directory: build
        run: 7z x ../downloads/icu4c-${{env.icu4c_version_underscore}}-src.zip

      - name: Build icu
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/icu/source/allinone
        run: msbuild allinone.sln /property:Configuration=${{env.buildtype}} /p:platform=${{env.msbuild_platform}} /p:SkipUWP=true

      - name: Install icu
        shell: bash
        working-directory: build/icu
        run: |
          cp -r include/unicode ${{env.prefix_path_unix}}/include/
          cp ${{env.libdir}}/{*.lib,*.pdb,*.exp} ${{env.prefix_path_unix}}/lib/
          cp ${{env.bindir}}/{*.dll,*.exe} ${{env.prefix_path_unix}}/bin/

      - name: Generate icu pc
        shell: bash
        run: |
          echo "prefix=${{env.prefix_path_forwardslash}}" > ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "exec_prefix=\${prefix}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "libdir=\${exec_prefix}/lib" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "includedir=\${prefix}/include" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "Name: icu-uc" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "Description: International Components for Unicode: Common and Data libraries" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "Version: ${{env.icu4c_version}}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "Libs: -L\${libdir} -licuuc${{env.lib_postfix}} -licudt" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo "Libs.private: -lpthread -lm" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-uc.pc
          echo
          echo "prefix=${{env.prefix_path_forwardslash}}" > ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "exec_prefix=\${prefix}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "libdir=\${exec_prefix}/lib" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "includedir=\${prefix}/include" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "Name: icu-i18n" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "Description: International Components for Unicode: Stream and I/O Library" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "Version: ${{env.icu4c_version}}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "Libs: -licuin${{env.lib_postfix}}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo "Requires: icu-uc" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-i18n.pc
          echo
          echo "prefix=${{env.prefix_path_forwardslash}}" > ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "exec_prefix=\${prefix}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "libdir=\${exec_prefix}/lib" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "includedir=\${prefix}/include" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "Name: icu-io" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "Description: International Components for Unicode: Stream and I/O Library" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "Version: ${{env.icu4c_version}}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "Libs: -licuio${{env.lib_postfix}}" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc
          echo "Requires: icu-i18n" >> ${{env.prefix_path_unix}}/lib/pkgconfig/icu-io.pc


      - name: Download expat
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/libexpat/libexpat/releases/download/R_${{env.expat_version_underscore}}/expat-${{env.expat_version}}.tar.xz

      - name: Extract expat
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/expat-${{env.expat_version}}.tar.xz

      - name: Configure expat
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/expat-${{env.expat_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DEXPAT_SHARED_LIBS=ON -DEXPAT_BUILD_DOCS=OFF -DEXPAT_BUILD_EXAMPLES=OFF -DEXPAT_BUILD_FUZZERS=OFF -DEXPAT_BUILD_TESTS=OFF -DEXPAT_BUILD_TOOLS=OFF -DEXPAT_BUILD_PKGCONFIG=ON

      - name: Build expat
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/expat-${{env.expat_version}}/build
        run: cmake --build .

      - name: Install expat
        shell: cmd
        working-directory: build/expat-${{env.expat_version}}/build
        run: cmake --install .


      - name: Download Boost
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://boostorg.jfrog.io/artifactory/main/release/${{env.boost_version}}/source/boost_${{env.boost_version_underscore}}.tar.bz2

      - name: Extract Boost
        shell: bash
        working-directory: build
        run: tar -xf  ../downloads/boost_${{env.boost_version_underscore}}.tar.bz2

      - name: Configure Boost
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/boost_${{env.boost_version_underscore}}
        run: bootstrap.bat

      - name: Build and install Boost
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/boost_${{env.boost_version_underscore}}
        run: b2.exe -a -q -j 4 -d1 --ignore-site-config --stagedir="stage" --layout="tagged" --without-mpi --without-python --prefix="${{env.prefix_path_forwardslash}}" --exec-prefix="${{env.prefix_path_forwardslash}}\bin" --libdir="${{env.prefix_path_forwardslash}}\lib" --includedir="${{env.prefix_path_forwardslash}}\include" toolset=msvc architecture=x86 link=shared runtime-link=shared threadapi=win32 threading=multi variant=${{env.buildtype}} install


      - name: Download file
        shell: bash
        working-directory: build
        run: |
          git clone https://github.com/julian-r/file-windows
          cd file-windows
          git submodule update --init --recursive
          git submodule update --remote file
          cd file
          git checkout FILE${{env.file_version_underscore}}

      - name: Configure file
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/file-windows
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build file
        env:
          CL: "/MP"
        working-directory: build/file-windows/build
        run: cmake --build .

      - name: Install file
        working-directory: build/file-windows/build
        run: |
          copy *.lib ${{env.prefix_path_backslash}}\lib\
          copy *.dll ${{env.prefix_path_backslash}}\bin\
          copy ..\file\src\magic.h ${{env.prefix_path_backslash}}\include\
          mkdir ${{env.prefix_path_backslash}}\share\magic
          copy magic.mgc ${{env.prefix_path_backslash}}\share\magic\


      - name: Download SQLite
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://sqlite.org/2024/sqlite-autoconf-${{env.sqlite3_version}}.tar.gz

      - name: Extract SQLite
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/sqlite-autoconf-${{env.sqlite3_version}}.tar.gz

      - name: Build SQlite
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/sqlite-autoconf-${{env.sqlite3_version}}
        run: |
          cl -DSQLITE_API="__declspec(dllexport)" -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_COLUMN_METADATA sqlite3.c -link -dll -out:sqlite3.dll
          cl shell.c sqlite3.c -Fe:sqlite3.exe

      - name: Install SQLite
        shell: cmd
        working-directory: build/sqlite-autoconf-${{env.sqlite3_version}}
        run: |
          copy *.h ${{env.prefix_path_backslash}}\include\
          copy *.lib ${{env.prefix_path_backslash}}\lib\
          copy *.dll ${{env.prefix_path_backslash}}\bin\
          copy *.exe ${{env.prefix_path_backslash}}\bin\

      - name: Create sqlite3.pc
        shell: bash
        run: |
          echo "prefix=${{env.prefix_path_forwardslash}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "exec_prefix=${{env.prefix_path_forwardslash}}" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "libdir=${{env.prefix_path_forwardslash}}/lib" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "includedir=${{env.prefix_path_forwardslash}}/include" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Name: SQLite" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Description: SQL database engine" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "URL: https://www.sqlite.org/" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Version: 3.38.1" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Libs: -L${{env.prefix_path_forwardslash}}/lib -lsqlite3" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Libs.private: -lz -ldl" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Cflags: -I${{env.prefix_path_forwardslash}}/include" >>${{env.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc


      - name: Download GLib
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://download.gnome.org/sources/glib/${{env.glib_version_short}}/glib-${{env.glib_version}}.tar.xz

      - name: Extract GLib
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/glib-${{env.glib_version}}.tar.xz || true

      - name: Configure GLib
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{env.prefix_path_backslash}}\include
          CXXFLAGS: -I${{env.prefix_path_backslash}}\include
          LDFLAGS: -L${{env.prefix_path_backslash}}\lib
        working-directory: build/glib-${{env.glib_version}}
        run: meson setup --buildtype=${{env.meson_buildtype}} --default-library=shared --prefix=${{env.prefix_path_backslash}} --pkg-config-path=${{env.prefix_path_backslash}}\lib\pkgconfig build

      - name: Build GLib
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/glib-${{env.glib_version}}/build
        run: ninja

      - name: Install GLib
        shell: cmd
        working-directory: build/glib-${{env.glib_version}}/build
        run: ninja install


      - name: Download freetype
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.sourceforge_mirror}}/project/freetype/freetype2/${{env.freetype_version}}/freetype-${{env.freetype_version}}.tar.gz

      - name: Extract freetype (boostrap)
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/freetype-${{env.freetype_version}}.tar.gz

      - name: Configure freetype (boostrap)
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/freetype-${{env.freetype_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON

      - name: Build freetype (boostrap)
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/freetype-${{env.freetype_version}}/build
        run: cmake --build .

      - name: Install freetype (boostrap)
        shell: cmd
        working-directory: build/freetype-${{env.freetype_version}}/build
        run: cmake --install .

      - name: Copy freetype (debug)
        if: env.buildtype == 'debug'
        shell: bash
        run: cp ${{env.prefix_path_unix}}/lib/freetyped.lib ${{env.prefix_path_unix}}/lib/freetype.lib


      - name: Download harfbuzz
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/harfbuzz/harfbuzz/releases/download/${{env.harfbuzz_version}}/harfbuzz-${{env.harfbuzz_version}}.tar.xz

      - name: Extract harfbuzz
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/harfbuzz-${{env.harfbuzz_version}}.tar.xz || true

      - name: Configure harfbuzz
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{env.prefix_path_backslash}}\include
          CXXFLAGS: -I${{env.prefix_path_backslash}}\include
          LDFLAGS: -L${{env.prefix_path_backslash}}\lib

        working-directory: build/harfbuzz-${{env.harfbuzz_version}}
        run: meson setup --buildtype=${{env.meson_buildtype}} --default-library=shared --prefix="${{env.prefix_path_backslash}}" --pkg-config-path=${{env.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dcpp_std=c++17 -Dtests=disabled -Ddocs=disabled -Dfreetype=enabled -Dicu=enabled build

      - name: Build harfbuzz
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/harfbuzz-${{env.harfbuzz_version}}/build
        run: ninja

      - name: Install harfbuzz
        shell: cmd
        working-directory: build/harfbuzz-${{env.harfbuzz_version}}/build
        run: ninja install


      - name: Delete freetype bootstrap
        shell: bash
        working-directory: build
        run: rm -rf freetype-${{env.freetype_version}}

      - name: Extract freetype
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/freetype-${{env.freetype_version}}.tar.gz

      - name: Configure freetype
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/freetype-${{env.freetype_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON

      - name: Build freetype
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/freetype-${{env.freetype_version}}/build
        run: cmake --build .

      - name: Install freetype
        shell: cmd
        working-directory: build/freetype-${{env.freetype_version}}/build
        run: cmake --install .

      - name: Copy freetype (debug)
        if: env.buildtype == 'debug'
        shell: bash
        run: cp ${{env.prefix_path_unix}}/lib/freetyped.lib ${{env.prefix_path_unix}}/lib/freetype.lib


      - name: Download mariadbclient
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://archive.mariadb.org/connector-c-${{env.mariadbclient_version}}/mariadb-connector-c-${{env.mariadbclient_version}}-src.tar.gz

      - name: Extract mariadbclient
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/mariadb-connector-c-${{env.mariadbclient_version}}-src.tar.gz

      - name: Configure mariadbclient
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/mariadb-connector-c-${{env.mariadbclient_version}}-src
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DWITH_SSL=ON -DWITH_UNIT_TESTS=OFF

      - name: Build mariadbclient
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/mariadb-connector-c-${{env.mariadbclient_version}}-src/build
        run: cmake --build .

      - name: Install mariadbclient
        shell: cmd
        working-directory: build/mariadb-connector-c-${{env.mariadbclient_version}}-src/build
        run: cmake --install . --config ${{env.cmake_buildtype}}

      - name: Copy mariadbclient lib
        shell: cmd
        run: copy ${{env.prefix_path_backslash}}\lib\mariadb\libmariadb.* ${{env.prefix_path_backslash}}\lib\


      - name: Download qtbase
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.qt_mirror}}/official_releases/qt/${{env.qt_version_short}}/${{env.qt_version}}/submodules/qtbase-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Extract qtbase
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/qtbase-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Copy sqlite3
        shell: bash
        working-directory: build
        run: cp sqlite-*/sqlite3.{c,h} qtbase-everywhere-src-${{env.qt_version}}/src/3rdparty/sqlite/

      - name: Configure qtbase
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{env.prefix_path_backslash}}\include
          CXXFLAGS: -I${{env.prefix_path_backslash}}\include
          LDFLAGS: -L${{env.prefix_path_backslash}}\lib
        working-directory: build/qtbase-everywhere-src-${{env.qt_version}}
        run: >
          cmake --log-level="${{env.cmake_loglevel}}" -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}"
          -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"
          -DBUILD_SHARED_LIBS=ON
          -DPKG_CONFIG_EXECUTABLE="${{env.prefix_path_backslash}}\bin\pkgconf.exe"
          -DQT_BUILD_EXAMPLES=OFF
          -DQT_BUILD_BENCHMARKS=OFF
          -DQT_BUILD_TESTS=OFF
          -DQT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          -DQT_BUILD_TOOLS_BY_DEFAULT=ON
          -DQT_WILL_BUILD_TOOLS=ON
          -DBUILD_WITH_PCH=OFF
          -DFEATURE_rpath=OFF
          -DFEATURE_pkg_config=ON
          -DFEATURE_accessibility=ON
          -DFEATURE_fontconfig=OFF
          -DFEATURE_freetype=ON
          -DFEATURE_harfbuzz=ON
          -DFEATURE_pcre2=ON
          -DFEATURE_openssl=ON
          -DFEATURE_openssl_linked=ON
          -DFEATURE_opengl=ON
          -DFEATURE_opengl_dynamic=ON
          -DFEATURE_use_gold_linker_alias=OFF
          -DFEATURE_glib=ON
          -DFEATURE_icu=ON
          -DFEATURE_directfb=OFF
          -DFEATURE_dbus=OFF
          -DFEATURE_sql=ON
          -DFEATURE_sql_sqlite=ON
          -DFEATURE_sql_odbc=ON
          -DFEATURE_sql_mysql=ON
          -DFEATURE_sql_psql=OFF
          -DFEATURE_jpeg=ON
          -DFEATURE_png=ON
          -DFEATURE_gif=ON
          -DFEATURE_style_windows=ON
          -DFEATURE_style_windowsvista=ON
          -DFEATURE_style_windows11=ON
          -DFEATURE_system_zlib=ON
          -DFEATURE_system_png=ON
          -DFEATURE_system_jpeg=ON
          -DFEATURE_system_pcre2=ON
          -DFEATURE_system_freetype=ON
          -DFEATURE_system_harfbuzz=ON
          -DFEATURE_system_sqlite=ON
          -DICU_ROOT="${{env.prefix_path_backslash}}"

      - name: Build qtbase
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/qtbase-everywhere-src-${{env.qt_version}}/build
        run: cmake --build .

      - name: Install qtbase
        shell: cmd
        working-directory: build/qtbase-everywhere-src-${{env.qt_version}}/build
        run: cmake --install .


      - name: Download qttools
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.qt_mirror}}/official_releases/qt/${{env.qt_version_short}}/${{env.qt_version}}/submodules/qttools-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Extract qttools
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/qttools-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Configure qttools
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{env.prefix_path_backslash}}\include
          CXXFLAGS: -I${{env.prefix_path_backslash}}\include
          LDFLAGS: -L${{env.prefix_path_backslash}}\lib
        working-directory: build/qttools-everywhere-src-${{env.qt_version}}
        run: >
          cmake --log-level="${{env.cmake_loglevel}}" -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}"
          -DCMAKE_PREFIX_PATH="${{env.prefix_path_backslash}}\lib\cmake"
          -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"
          -DBUILD_SHARED_LIBS=ON
          -DBUILD_STATIC_LIBS=OFF
          -DQT_BUILD_EXAMPLES=OFF
          -DQT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          -DFEATURE_assistant=OFF
          -DFEATURE_designer=OFF
          -DFEATURE_distancefieldgenerator=OFF
          -DFEATURE_kmap2qmap=OFF
          -DFEATURE_pixeltool=OFF
          -DFEATURE_qdbus=OFF
          -DFEATURE_qev=OFF
          -DFEATURE_qtattributionsscanner=OFF
          -DFEATURE_qtdiag=OFF
          -DFEATURE_qtplugininfo=OFF
          -DFEATURE_linguist=ON

      - name: Build qttools
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/qttools-everywhere-src-${{env.qt_version}}/build
        run: cmake --build .

      - name: Install qttools
        shell: cmd
        working-directory: build/qttools-everywhere-src-${{env.qt_version}}/build
        run: cmake --install .


      - name: Download qt5compat
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.qt_mirror}}/official_releases/qt/${{env.qt_version_short}}/${{env.qt_version}}/submodules/qt5compat-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Extract qt5compat
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/qt5compat-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Configure qt5compat
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{env.prefix_path_backslash}}\include
          CXXFLAGS: -I${{env.prefix_path_backslash}}\include
          LDFLAGS: -L${{env.prefix_path_backslash}}\lib
        working-directory: build/qt5compat-everywhere-src-${{env.qt_version}}
        run: >
          cmake --log-level="${{env.cmake_loglevel}}" -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}"
          -DCMAKE_PREFIX_PATH="${{env.prefix_path_backslash}}\lib\cmake"
          -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"
          -DBUILD_SHARED_LIBS=ON
          -DBUILD_STATIC_LIBS=OFF

      - name: Build qt5compat
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/qt5compat-everywhere-src-${{env.qt_version}}/build
        run: cmake --build .

      - name: Install qt5compat
        shell: cmd
        working-directory: build/qt5compat-everywhere-src-${{env.qt_version}}/build
        run: cmake --install .


      - name: Download qtactiveqt
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://${{env.qt_mirror}}/official_releases/qt/${{env.qt_version_short}}/${{env.qt_version}}/submodules/qtactiveqt-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Extract qtactiveqt
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/qtactiveqt-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Configure qtactiveqt
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{env.prefix_path_backslash}}\include
          CXXFLAGS: -I${{env.prefix_path_backslash}}\include
          LDFLAGS: -L${{env.prefix_path_backslash}}\lib
        working-directory: build/qtactiveqt-everywhere-src-${{env.qt_version}}
        run: >
          cmake --log-level="${{env.cmake_loglevel}}" -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}"
          -DCMAKE_PREFIX_PATH="${{env.prefix_path_backslash}}\lib\cmake"
          -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"
          -DBUILD_SHARED_LIBS=ON
          -DBUILD_STATIC_LIBS=OFF

      - name: Build qtactiveqt
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/qtactiveqt-everywhere-src-${{env.qt_version}}/build
        run: cmake --build .

      - name: Install qtactiveqt
        shell: cmd
        working-directory: build/qtactiveqt-everywhere-src-${{env.qt_version}}/build
        run: cmake --install .


      - name: Download quazip
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/stachenov/quazip/archive/refs/tags/v${{env.quazip_version}}.tar.gz

      - name: Extract quazip
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/v${{env.quazip_version}}.tar.gz

      - name: Patch quazip
        shell: bash
        working-directory: build/quazip-${{env.quazip_version}}
        run: patch -p1 < ../../patches/quazip-pkgconfig.patch

      - name: Configure quazip
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/quazip-${{env.quazip_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DQUAZIP_QT_MAJOR_VERSION=6 -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH="${{env.prefix_path_backslash}}\lib\cmake" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build quazip
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/quazip-${{env.quazip_version}}/build
        run: cmake --build .

      - name: Install quazip
        shell: cmd
        working-directory: build/quazip-${{env.quazip_version}}/build
        run: cmake --install .


      - name: Create archive
        shell: bash
        run: tar -cJf qt-msvc-${{matrix.arch}}-${{env.buildtype}}.tar.xz --transform "s,^$(echo ${{env.prefix_path_unix}} | cut -d '/' -f 2-),qt_msvc_${{matrix.arch}}_${{env.buildtype}}," ${{env.prefix_path_unix}}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-msvc-${{matrix.arch}}-${{env.buildtype}}
          path: qt-msvc-${{matrix.arch}}-${{env.buildtype}}.tar.xz


  create-release:
    name: Create GitHub Release
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    needs:
      - build-windows-msvc
    steps:

      - name: Install packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt install -y git hub

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set release tag
        run: echo "release_tag=release-$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Set have release
        run: echo "have_release=$(git tag -l | grep ${{env.release_tag}} >/dev/null 2>&1 && echo 1 || echo 0)" >> $GITHUB_ENV

      - name: Delete existing release
        if: env.have_release == '1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release delete "${{env.release_tag}}"
          git tag -d "${{env.release_tag}}"
          git push --delete origin "${{env.release_tag}}"

      - name: Delete old releases
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          while [ "$(git tag | wc -l)" -ge "${{env.max_releases}}" ]; do
            oldest_tag=$(git tag | head -1)
            hub release delete "$oldest_tag"
            git tag -d "$oldest_tag"
            git push --delete origin "$oldest_tag"
          done

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases

      - name: Set release notes file
        run: echo "release_notes_file=release_notes.txt" >> $GITHUB_ENV

      - name: Create release notes
        run: |
          echo "Qt MSVC Release $GITHUB_RUN_ID" > "${{env.release_notes_file}}"
          echo "" >> "${{env.release_notes_file}}"
          echo "Libraries:" >> "${{env.release_notes_file}}"
          echo "" >> "${{env.release_notes_file}}"
          echo "* pkgconf ${{env.pkgconf_version}}" >> "${{env.release_notes_file}}"
          echo "* mimalloc ${{env.mimalloc_version}}" >> "${{env.release_notes_file}}"
          echo "* zlib ${{env.zlib_version}}" >> "${{env.release_notes_file}}"
          echo "* OpenSSL ${{env.openssl_version}}" >> "${{env.release_notes_file}}"
          echo "* libng ${{env.libpng_version}}" >> "${{env.release_notes_file}}"
          echo "* libjpeg-turbo ${{env.libjpeg_turbo_version}}" >> "${{env.release_notes_file}}"
          echo "* PCRE2 ${{env.pcre2_version}}" >> "${{env.release_notes_file}}"
          echo "* bzip2 ${{env.bzip2_version}}" >> "${{env.release_notes_file}}"
          echo "* xz ${{env.xz_version}}" >> "${{env.release_notes_file}}"
          echo "* Brotli ${{env.brotli_version}}" >> "${{env.release_notes_file}}"
          echo "* ICU4C ${{env.icu4c_version}}" >> "${{env.release_notes_file}}"
          echo "* Boost ${{env.boost_version}}" >> "${{env.release_notes_file}}"
          echo "* Expat ${{env.expat_version}}" >> "${{env.release_notes_file}}"
          echo "* File (libmagic) ${{env.file_version}}" >> "${{env.release_notes_file}}"
          echo "* SQLite ${{env.sqlite3_version}}" >> "${{env.release_notes_file}}"
          echo "* GLib ${{env.glib_version}}" >> "${{env.release_notes_file}}"
          echo "* GLib Networking ${{env.glib_networking_version}}" >> "${{env.release_notes_file}}"
          echo "* FreeType ${{env.freetype_version}}" >> "${{env.release_notes_file}}"
          echo "* Harfbuzz ${{env.harfbuzz_version}}" >> "${{env.release_notes_file}}"
          echo "* mariadbclient ${{env.mariadbclient_version}}" >> "${{env.release_notes_file}}"
          echo "* Qt ${{env.qt_version}}" >> "${{env.release_notes_file}}"
          echo "* QuaZip ${{env.quazip_version}}" >> "${{env.release_notes_file}}"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          set -x
          files=()
          for file in $(find releases -type f); do
            echo "Adding file: ${file}"
            files+=("-a" "${file}")
          done
          hub release create -t "$GITHUB_SHA" "${files[@]}" -F "${{env.release_notes_file}}" "${{env.release_tag}}"
