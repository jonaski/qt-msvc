name: C/C++ CI
on: [push, pull_request]

jobs:

  build-windows-msvc:
    name: Build Windows MSVC
    runs-on: windows-2019

    strategy:
      matrix:
       include:
         - description: "x86 Release"
           arch: "x86"
           buildtype: "release"
           openssl_platform: "VC-WIN32"
           prefix_path: c:\qt_msvc_x86_release
           prefix_path2: c:/qt_msvc_x86_release
           prefix_path3: /c/qt_msvc_x86_release

         - description: "x86 Debug"
           arch: "x86"
           buildtype: "debug"
           openssl_platform: "VC-WIN32"
           prefix_path: c:\qt_msvc_x86_debug
           prefix_path2: c:/qt_msvc_x86_debug
           prefix_path3: /c/qt_msvc_x86_debug

         - description: "x86_64 Release"
           arch: "x86_64"
           buildtype: "release"
           openssl_platform: "VC-WIN64A"
           prefix_path: c:\qt_msvc_x86_64_release
           prefix_path2: c:/qt_msvc_x86_64_release
           prefix_path3: /c/qt_msvc_x86_64_release

         - description: "x86_64 Debug"
           arch: "x86_64"
           buildtype: "debug"
           openssl_platform: "VC-WIN64A"
           prefix_path: c:\qt_msvc_x86_64_debug
           prefix_path2: c:/qt_msvc_x86_64_debug
           prefix_path3: /c/qt_msvc_x86_64_debug

    steps:

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.arch}}
          toolset: 14.29

      - uses: actions/checkout@v1.2.0
      - uses: actions/setup-python@v1

      - name: Install python dependencies
        run: pip install meson ninja

      - name: Create sources directory
        run: mkdir sources

      - name: Create directories
        shell: bash
        run: mkdir -p ${{matrix.prefix_path3}}/{bin,lib,include}

      - name: Update PATH
        run: echo "${{matrix.prefix_path}}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Delete conflicting files
        shell: bash
        run: |
          rm -f /c/programdata/chocolatey/bin/{addr2line.exe,ar.exe,as.exe,c++.exe,c++filt.exe,cc1.exe,cc1plus.exe,cpp.exe,g++.exe,gcc-ar.exe,gcc-nm.exe,gcc-ranlib.exe,gcc.exe,gdb.exe,gfortran.exe,ld.bfd.exe,ld.exe,ld.gold.exe,nm.exe,ranlib.exe,readelf.exe,windres.exe,x86_64-w64-mingw32-c++.exe,x86_64-w64-mingw32-g++.exe,x86_64-w64-mingw32-gcc-8.1.0.exe,x86_64-w64-mingw32-gcc-ar.exe,x86_64-w64-mingw32-gcc-nm.exe,x86_64-w64-mingw32-gcc-ranlib.exe,x86_64-w64-mingw32-gcc.exe,x86_64-w64-mingw32-gfortran.exe}
          rm -f /c/strawberry/c/bin/{addr2line.exe,ar.exe,as.exe,c++.exe,c++filt.exe,cpp.exe,g++.exe,gcc-ar.exe,gcc-nm.exe,gcc-ranlib.exe,gcc.exe,ld.exe,nm.exe,ranlib.exe,readelf.exe,widl.exe,windmc.exe,windres.exe,x86_64-w64-mingw32-c++.exe,x86_64-w64-mingw32-g++.exe,x86_64-w64-mingw32-gcc-8.3.0.exe,x86_64-w64-mingw32-gcc-ar.exe,x86_64-w64-mingw32-gcc-nm.exe,x86_64-w64-mingw32-gcc-ranlib.exe,x86_64-w64-mingw32-gcc.exe,x86_64-w64-mingw32-gfortran.exe}


      - name: Download nasm
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "nasm [this](http://files.jkvinge.net/packages/strawberry-dependencies/nasm-2.15.05-installer-x64.exe)!"
          target: downloads/
          auto-match: true

      - name: Install nasm
        working-directory: downloads
        run: |
          mkdir c:\nasm
          cd c:\nasm
          7z x ${{github.workspace}}\downloads\nasm-2.15.05-installer-x64.exe

      - name: Add nasm to PATH
        run: echo "c:\nasm" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Download yasm
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "yasm [this](http://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe)!"
          target: downloads/
          auto-match: true

      - name: Copy yasm
        shell: bash
        working-directory: downloads
        run: cp yasm-1.3.0-win64.exe ${{matrix.prefix_path3}}/bin/yasm.exe


      - name: Download win_flex_bison
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "win_flex_bison [this](https://github.com/lexxmark/winflexbison/releases/download/v2.5.25/win_flex_bison-2.5.25.zip)!"
          target: downloads/
          auto-match: true

      - name: Copy win_flex_bison
        run: |
          mkdir c:\win_flex_bison
          cd c:\win_flex_bison
          7z x ${{github.workspace}}\downloads\win_flex_bison-2.5.25.zip

      - name: Add win_flex_bison to PATH
        run: echo "c:\win_flex_bison" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Download Boost
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "Boost [this](https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract Boost
        shell: bash
        working-directory: sources
        run: tar -xf  ../downloads/boost_1_79_0.tar.bz2

      - name: Copy Boost
        shell: bash
        working-directory: sources
        run: cp -r boost_1_79_0/boost ${{matrix.prefix_path3}}/include/


      - name: Download pkgconf
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "pkgconf [this](https://github.com/pkgconf/pkgconf/archive/refs/tags/pkgconf-1.8.0.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract pkgconf
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/pkgconf-1.8.0.tar.gz

      - name: Compile pkgconf
        env:
          CL: "/MP"
        working-directory: sources/pkgconf-pkgconf-1.8.0
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path}} -Dtests=false build
          cd build
          ninja
          ninja install
          copy ${{matrix.prefix_path}}\bin\pkgconf.exe ${{matrix.prefix_path}}\bin\pkg-config.exe


      - name: Download zlib
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "zlib [this](https://zlib.net/zlib-1.2.12.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract zlib
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/zlib-1.2.12.tar.gz

      - name: Compile zlib
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/zlib-1.2.12
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}"
          cmake --build .
          cmake --install .

      - name: copy zlib (release)
        if: matrix.buildtype == 'release'
        shell: bash
        run: cp ${{matrix.prefix_path3}}/lib/zlib.lib ${{matrix.prefix_path3}}/lib/z.lib

      - name: copy zlib (debug)
        if: matrix.buildtype == 'debug'
        shell: bash
        run: |
          cp ${{matrix.prefix_path3}}/lib/zlibd.lib ${{matrix.prefix_path3}}/lib/z.lib
          cp ${{matrix.prefix_path3}}/lib/zlibd.lib ${{matrix.prefix_path3}}/lib/zd.lib


      - name: Download openssl
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "openssl [this](https://www.openssl.org/source/openssl-3.0.3.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract openssl
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/openssl-3.0.3.tar.gz

      - name: Configure openssl (release)
        if: matrix.buildtype == 'release'
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/openssl-3.0.3
        run: perl Configure ${{matrix.openssl_platform}} shared zlib no-capieng no-tests --prefix=${{matrix.prefix_path}} --libdir=lib --openssldir=${{matrix.prefix_path}}\ssl --release --with-zlib-include=${{matrix.prefix_path}}\include --with-zlib-lib=${{matrix.prefix_path}}\lib\zlib.lib

      - name: Configure openssl (debug)
        if: matrix.buildtype == 'debug'
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/openssl-3.0.3
        run: perl Configure ${{matrix.openssl_platform}} shared zlib no-capieng no-tests --prefix=${{matrix.prefix_path}} --libdir=lib --openssldir=${{matrix.prefix_path}}\ssl --debug --with-zlib-include=${{matrix.prefix_path}}\include --with-zlib-lib=${{matrix.prefix_path}}\lib\zlibd.lib

      - name: Compile openssl
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/openssl-3.0.3
        run: |
          nmake
          nmake install


      - name: Download libpng
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libpng [this](https://downloads.sourceforge.net/project/libpng/libpng16/1.6.37/libpng-1.6.37.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract libpng
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/libpng-1.6.37.tar.xz
          cd libpng-1.6.37
          patch -p1 < ../../patches/libpng-msvc.patch

      - name: Compile libpng
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/libpng-1.6.37
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}"
          cmake --build .
          cmake --install .


      - name: Download pcre2
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "pcre2 [this](https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.40/pcre2-10.40.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract pcre2
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/pcre2-10.40.tar.bz2

      - name: Compile pcre2
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/pcre2-10.40
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_BUILD_PCRE2_8=ON -DPCRE2_BUILD_PCRE2_16=ON -DPCRE2_BUILD_PCRE2_32=ON -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_BUILD_TESTS=OFF
          cmake --build .
          cmake --install .


      - name: Download bzip2
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "bzip2 [this](https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract bzip2
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/bzip2-1.0.8.tar.gz
          cd bzip2-1.0.8
          patch -p1 < ../../patches/bzip2-cmake.patch

      - name: Compile bzip2
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/bzip2-1.0.8
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}"
          cmake --build .
          cmake --install .


      - name: Download xz
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "xz [this](https://tukaani.org/xz/xz-5.2.5.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract xz
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/xz-5.2.5.tar.xz

      - name: Compile liblzma (x86)
        if: matrix.arch == 'x86'
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/xz-5.2.5/windows/vs2019
        run: |
          msbuild xz_win.sln /property:Configuration=${{matrix.buildtype}} /p:platform=Win32
          copy ..\..\src\liblzma\api\*.h ${{matrix.prefix_path}}\include\
          mkdir ${{matrix.prefix_path}}\include\lzma
          copy ..\..\src\liblzma\api\lzma\*.* ${{matrix.prefix_path}}\include\lzma\
          copy ${{matrix.buildtype}}\win32\liblzma_dll\*.lib ${{matrix.prefix_path}}\lib\
          copy ${{matrix.buildtype}}\win32\liblzma_dll\*.dll ${{matrix.prefix_path}}\bin\

      - name: Compile liblzma (x86_x64)
        if: matrix.arch == 'x86_x64'
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/xz-5.2.5/windows/vs2019
        run: |
          msbuild xz_win.sln /property:Configuration=${{matrix.buildtype}} /p:platform=x64
          copy ..\..\src\liblzma\api\*.h ${{matrix.prefix_path}}\include\
          mkdir ${{matrix.prefix_path}}\include\lzma
          copy ..\..\src\liblzma\api\lzma\*.* ${{matrix.prefix_path}}\include\lzma\
          copy ${{matrix.buildtype}}\x64\liblzma_dll\*.lib ${{matrix.prefix_path}}\lib\
          copy ${{matrix.buildtype}}\x64\liblzma_dll\*.dll ${{matrix.prefix_path}}\bin\


      - name: Download brotli
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "brotli [this](https://github.com/google/brotli/archive/refs/tags/v1.0.9.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract brotli
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/v1.0.9.tar.gz

      - name: Compile brotli
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/brotli-1.0.9
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}" -DBUILD_TESTING=OFF
          cmake --build .
          cmake --install .


      - name: Download file
        shell: bash
        working-directory: sources
        run: |
          git clone https://github.com/julian-r/file-windows
          cd file-windows
          git submodule update --init --recursive
          git submodule update --remote file
          cd file
          git checkout FILE5_42
          patch -p1 < ../../../patches/file-1-fixes.patch

      - name: Compile file
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources/file-windows
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}"
          cmake --build .
          cmake --install .


      - name: Compile libiconv
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
        working-directory: sources
        run: |
          git clone https://github.com/pffang/libiconv-for-Windows
          cd libiconv-for-Windows
          git checkout 9b7aba8da6e125ef33912fa4412779279f204003
          msbuild libiconv.sln /property:Configuration=${{matrix.buildtype}}
          copy include\*.h ${{matrix.prefix_path}}\include\

      - name: Copy libiconv (x86)
        if: matrix.buildtype == 'x86'
        working-directory: sources/xz-5.2.5/windows/vs2019
        run: |
          copy lib\*.lib ${{matrix.prefix_path}}\lib\
          copy lib\*.dll ${{matrix.prefix_path}}\bin\

      - name: Copy libiconv (x86_x64)
        if: matrix.buildtype == 'x86_x64'
        working-directory: sources/xz-5.2.5/windows/vs2019
        run: |
          copy lib64\*.lib ${{matrix.prefix_path}}\lib\
          copy lib64\*.dll ${{matrix.prefix_path}}\bin\


      - name: Download GLib
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "GLib [this](https://download.gnome.org/sources/glib/2.72/glib-2.72.1.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract GLib
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/glib-2.72.1.tar.xz

      - name: Compile GLib
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig

        working-directory: sources/glib-2.72.1
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path}} --pkg-config-path=${{matrix.prefix_path}}\lib\pkgconfig build
          cd build
          ninja
          ninja install


      - name: Download qtbase
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "qtbase [this](https://download.qt.io/official_releases/qt/6.3/6.3.1/submodules/qtbase-everywhere-src-6.3.1.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract qtbase
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/qtbase-everywhere-src-6.3.1.tar.xz

      - name: Configure qtbase
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path2}}/include
          LDFLAGS: -L${{matrix.prefix_path2}}/lib
        run: >
          cmake -S sources/qtbase-everywhere-src-6.3.1 -B sources/qtbase-everywhere-src-6.3.1/build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{matrix.buildtype}}
          -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}"
          -DBUILD_SHARED_LIBS=ON
          -DPKG_CONFIG_EXECUTABLE="${{matrix.prefix_path}}\bin\pkgconf.exe"
          -DQT_BUILD_EXAMPLES=OFF
          -DQT_BUILD_BENCHMARKS=OFF
          -DQT_BUILD_TESTS=OFF
          -DQT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          -DQT_BUILD_TOOLS_BY_DEFAULT=ON
          -DQT_WILL_BUILD_TOOLS=ON
          -DBUILD_WITH_PCH=OFF
          -DFEATURE_rpath=OFF
          -DFEATURE_pkg_config=ON
          -DFEATURE_accessibility=ON
          -DFEATURE_fontconfig=OFF
          -DFEATURE_harfbuzz=ON
          -DFEATURE_pcre2=ON
          -DFEATURE_openssl=ON
          -DFEATURE_openssl_linked=ON
          -DFEATURE_opengl=ON
          -DFEATURE_opengl_dynamic=ON
          -DFEATURE_use_gold_linker_alias=OFF
          -DFEATURE_glib=ON
          -DFEATURE_icu=OFF
          -DFEATURE_directfb=OFF
          -DFEATURE_dbus=OFF
          -DFEATURE_sql=ON
          -DFEATURE_sql_sqlite=OFF
          -DFEATURE_sql_mysql=OFF
          -DFEATURE_sql_psql=OFF
          -DFEATURE_sql_odbc=ON
          -DFEATURE_jpeg=ON
          -DFEATURE_png=ON
          -DFEATURE_gif=ON
          -DFEATURE_style_windows=ON
          -DFEATURE_style_windowsvista=ON
          -DFEATURE_system_zlib=ON
          -DFEATURE_system_png=ON
          -DFEATURE_system_jpeg=OFF
          -DFEATURE_system_pcre2=ON
          -DFEATURE_system_harfbuzz=OFF
          -DFEATURE_system_sqlite=OFF

      - name: Build qtbase
        working-directory: sources/qtbase-everywhere-src-6.3.1/build
        run: cmake --build .

      - name: Install qtbase
        working-directory: sources/qtbase-everywhere-src-6.3.1/build
        run: cmake --install .


      - name: Download qttools
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "qttools [this](https://download.qt.io/official_releases/qt/6.3/6.3.1/submodules/qttools-everywhere-src-6.3.1.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract qttools
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/qttools-everywhere-src-6.3.1.tar.xz

      - name: Compile qttools
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path2}}/include
          LDFLAGS: -L${{matrix.prefix_path2}}/lib
        working-directory: sources/qttools-everywhere-src-6.3.1
        run: |
          mkdir build
          cd build
          ${{matrix.prefix_path}}\bin\qt-configure-module.bat ..
          cmake --build .
          cmake --install .


      - name: Download qt5compat
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "qt5compat [this](https://download.qt.io/official_releases/qt/6.3/6.3.1/submodules/qt5compat-everywhere-src-6.3.1.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract qt5compat
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/qt5compat-everywhere-src-6.3.1.tar.xz

      - name: Compile qt5compat
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path2}}/include
          LDFLAGS: -L${{matrix.prefix_path2}}/lib
        working-directory: sources/qt5compat-everywhere-src-6.3.1
        run: |
          mkdir build
          cd build
          ${{matrix.prefix_path}}\bin\qt-configure-module.bat ..
          cmake --build .
          cmake --install .


      - name: Download qtactiveqt
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "qtactiveqt [this](https://download.qt.io/official_releases/qt/6.3/6.3.1/submodules/qtactiveqt-everywhere-src-6.3.1.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract qtactiveqt
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/qtactiveqt-everywhere-src-6.3.1.tar.xz

      - name: Compile qtactiveqt
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path2}}/include
          LDFLAGS: -L${{matrix.prefix_path2}}/lib
        working-directory: sources/qtactiveqt-everywhere-src-6.3.1
        run: |
          mkdir build
          cd build
          ${{matrix.prefix_path}}\bin\qt-configure-module.bat ..
          cmake --build .
          cmake --install .


      - name: Download quazip
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "quazip [this](https://github.com/stachenov/quazip/archive/refs/tags/v1.3.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract quazip
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/v1.3.tar.gz
          cd quazip-1.3
          patch -p1 < ../../patches/quazip-pkgconfig.patch

      - name: Compile quazip
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path2}}/include
          LDFLAGS: -L${{matrix.prefix_path2}}/lib
        working-directory: sources/quazip-1.3
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DQUAZIP_QT_MAJOR_VERSION=6 -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH=${{matrix.prefix_path}}\lib\cmake -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path}}"
          cmake --build .
          cmake --install .


      - name: Create archive
        shell: bash
        run: |
          tar -cJf qt-msvc-${{matrix.arch}}-${{matrix.buildtype}}.tar.xz --transform "s,^c/qt_msvc_${{matrix.arch}}_${{matrix.buildtype}},qt_msvc_${{matrix.arch}}_${{matrix.buildtype}}," ${{matrix.prefix_path3}}

      - uses: actions/upload-artifact@v2
        with:
          name: releases
          path: qt-msvc-${{matrix.arch}}-${{matrix.buildtype}}.tar.xz


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - build-windows-msvc
    steps:
      - uses: actions/checkout@v1.2.0
      - uses: actions/download-artifact@v2
        with:
          path: releases
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          hub release delete "latest" || true
          hub release create -a releases/releases/qt-msvc-x86-release.tar.xz -a releases/releases/qt-msvc-x86-debug.tar.xz -a releases/releases/qt-msvc-x86_64-release.tar.xz -a releases/releases/qt-msvc-x86_64-debug.tar.xz -m "Qt MSVC $GITHUB_SHA" "latest"
